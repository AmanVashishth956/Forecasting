# -*- coding: utf-8 -*-
"""ARIMA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GqNycEwXqMlSTRaMA4TsCLXCEyGzxcup
"""

!pip install arch

import pandas as pd
from statsmodels.tsa.stattools import adfuller
from arch.unitroot import PhillipsPerron

df=pd.read_csv("euro.csv") #loading the file

df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y') #converting date column "str" to "datetime" object
df.set_index('Date', inplace=True)

df.head(5) #printing top-5 data on the table

df.info()

df.describe() # prinitng basic Data statistics

df.plot()

"""### Filtering data for range April-2016 till April-2018"""

mmr1= df.loc['2022-1-1':'2023-1-1'] #filtering data for 2022-1-1 till 2023-1-1

mmr1.plot()

"""## Statistical test

### 1. Augmented Dickey-Fuller test
"""

result = adfuller(mmr1) #augmented Dickey-Fuller test
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
 print('\t%s: %.3f' % (key, value))

"""### 2. Phillips Perron test"""

PhillipsPerron(mmr1)

"""Since ADF test statistic is negative and p-value is higher we cannot reject the null of unit root and PP test is rehecting the null hypothesis, hence data is non-stationary

time series is not stationary and will require differencing to make it stationary, at least a difference order of 1.

### First Difference of mmr1
"""

dmmr1 = mmr1.diff()

dmmr1.iloc[0]=mmr1.iloc[0]

result = adfuller(dmmr1)
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
 print('\t%s: %.3f' % (key, value))

PhillipsPerron(dmmr1)

"""### After taking first diffrenec the data is stationary"""

from statsmodels.graphics.tsaplots import plot_acf
from matplotlib import pyplot

"""### Plotting Auto-correlation function"""

plot_acf(mmr1,lags=50) #plotting autocorrelation at First Difference 
pyplot.show()

"""We are getting positive auto-correlation at 30th lagsignificant for the first 10 lags.

A good starting point for the AR parameter of the model may be 10
"""

plot_acf(dmmr1,lags=50) #plotting autocorelation of first difference
pyplot.show()

"""### Plotting Partial Auto-Correlation function"""

from statsmodels.graphics.tsaplots import plot_pacf

plot_pacf(mmr1) #partial Autocorrelation of actual series
pyplot.show()

plot_pacf(dmmr1) #Partial Auto-Correlation of First Difference
pyplot.show()

"""Since ACF plot shows that Auto-correlation is dropping immediately after first lag and we can use ARIM

# ARIMA Models
"""

from statsmodels.tsa.arima.model import ARIMA #loading ARIMA model in python

model = ARIMA(mmr1, order=(5,1,0)) #initialisation of ARIMA model
model_fit = model.fit() # model fitting 
# summary of fit model
print(model_fit.summary())
# line plot of residuals
residuals = pd.DataFrame(model_fit.resid)
residuals.plot()
pyplot.show()

# density plot of residuals
residuals.plot(kind='kde')
pyplot.show()

import matplotlib.pyplot as plt
plt.plot(mmr1[80:],label="Actual Time Series")
plt.plot(model_fit.fittedvalues[80:], color='red',label="ARIMA")
plt.legend()

"""## First period ahead value Forcasting for Feb-2023"""

test = df.loc['2023-1-1':'2023-1-15'][:10]
test.head(10)

predicted = []
predicted2 = []
for i in range(0,10): #Rolling Forecast ARIMA model
  mmr1= df.loc['2022-1-1':f'2023-1-{1+i}'] 
  # # fit model
  model = ARIMA(mmr1, order=(5,1,0)) #-> ARIMA model 1
  model_fit = model.fit()
  predicted.append(model_fit.forecast(steps=1).to_list()[0]) #First period ahead forecast for Model1 

  #prediction by model 2
  model2 = ARIMA(mmr1, order=(10,1,0)) #-> ARIMA model 2
  model_fit2 = model2.fit()
  predicted2.append(model_fit2.forecast(steps=1).to_list()[0]) #First period ahead forecast for Model1

test['Model 1 predicted']=predicted
test['Model 2 predicted']=predicted2

test

from sklearn.metrics import mean_absolute_percentage_error
mean_absolute_percentage_error(test['EURO'],test['predicted']) #MSPE for Model 1

mean_absolute_percentage_error(test['EURO'],test['predicted2']) #MSPE for Model 2

# !pip install dieboldmariano

"""## Debol Mariano Test"""

from dieboldmariano import dm_test

dm_test(test["EURO"], test['predicted'], test['predicted2'], one_sided=True)

import matplotlib.pyplot as plt
plt.plot(test['EURO'],label="Actual Time Series")
plt.plot(test['Model 1 predicted'], color='red',label="ARIMA model 1")
plt.legend()

